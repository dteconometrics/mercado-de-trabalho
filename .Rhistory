library(xtable)
library(xts)
library(ggthemes)
library(purrr)
library(kableExtra)
library(GetTDData)
library(readr)
library(xts)
library(forecast)
library(scales)
library(mFilter)
library(grid)
library(png)
library(rbcb)
library(Quandl)
library(stargazer)
library(gridExtra)
# Pacotes Base dos Dados
library(basedosdados)
library(dplyr)
library(magrittr)
library(data.table)
library(lubridate)
library(ggplot2)
library(dtplyr)
library(scales)
library(tidyverse)
library(knitr)
## Fontes ------
foot_ibge <- "Fonte: ADEPE com dados do IBGE"
foot_mte <- "Fonte: ADEPE com dados do Ministério da Economia."
foot_bc <- "fonte: ADEPE com dados do Banco Central"
foot_ibge <- "fonte: ADEPE com dados do IBGE"
foot_bc_ibge <- "fonte: ADEPE com dados do IBGE/BCB"
# Cores -------------------
colors <- c(
blue       = "#282f6b",
red        = "#b22200",
yellow     = "#8c770b",
green      = "#224f20",
purple     = "#5f487c",
orange     = "#b35c1e",
turquoise  = "#419391",
green_two  = "#839c56",
light_blue = "#3b89bc",
gray       = "#666666"
)
acum_i <- function(data, n){
data_ma_n <- RcppRoll::roll_meanr(data, n)
data_lag_n <- dplyr::lag(data_ma_n, n)
data_acum_n = (((data_ma_n/data_lag_n)-1)*100)
return(data_acum_n)
}
massa_pe = '/t/6421/n3/26/v/8746/p/all/c12029/99383/d/v8746%201' %>%
get_sidra(api=.) %>%
dplyr::mutate(date = as.yearqtr(`Trimestre (Código)`, format = '%Y%q')) %>%
dplyr::select(date, Valor, "variavel" = "Variável") %>%
pivot_wider(names_from = variavel,
values_from = Valor) %>%
dplyr::rename(habitual = "Massa de rendimento mensal real das pessoas de 14 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, habitualmente recebido no trabalho principal",
efetivo = "Massa de rendimento mensal real das pessoas de 14 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, efetivamente recebido no trabalho principal")
massa_pe = '/t/6421/n3/26/v/8746/p/all/c12029/99383/d/v8746%201' %>%
get_sidra(api=.) %>%
dplyr::mutate(date = as.yearqtr(`Trimestre (Código)`, format = '%Y%q')) %>%
dplyr::select(date, Valor, "variavel" = "Variável") %>%
pivot_wider(names_from = variavel,
values_from = Valor)
View(massa_pe)
colnames(massa_pe)
View(massa_pe)
massa_pe = '/t/6421/n3/26/v/8746,8748/p/all/c12029/99383/d/v8746%201,v8748%201' %>%
get_sidra(api=.) %>%
dplyr::mutate(date = as.yearqtr(`Trimestre (Código)`, format = '%Y%q')) %>%
dplyr::select(date, Valor, "variavel" = "Variável") %>%
pivot_wider(names_from = variavel,
values_from = Valor)
View(massa_pe)
colnames(massa_pe)
massa_pe = '/t/6421/n3/26/v/8746,8748/p/all/c12029/99383/d/v8746%201,v8748%201' %>%
get_sidra(api=.) %>%
dplyr::mutate(date = as.yearqtr(`Trimestre (Código)`, format = '%Y%q')) %>%
dplyr::select(date, Valor, "variavel" = "Variável") %>%
pivot_wider(names_from = variavel,
values_from = Valor) %>%
dplyr::rename(habitual = "Coeficiente de variação - Massa de rendimento mensal real das pessoas de 14 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, habitualmente recebido no trabalho principal",
efetivo = "Coeficiente de variação - Massa de Rendimento mensal real das pessoas de 14 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, efetivamente recebido no trabalho principal")
massa_pe_long = massa_pe %>%
gather(variavel, valor, -date) %>%
mutate(date = as.Date(date))
colours_4 <- c("darkblue", "darkgray", "darkred", "#224f20", "#b35c1e", "#3b89bc")
last_obs <- massa_pe_long %>%
dplyr::filter(variavel %in% c('habitual', 'efetivo')) %>%
group_by(variavel) %>%
filter(date == max(date)) %>%
ungroup()
massa_pe_long %>%
dplyr::filter(variavel %in% c('habitual', 'efetivo')) %>%
ggplot(aes(x = date, y = valor, colour = variavel)) +
geom_line(size = 1) +   # Linha mais espessa para maior destaque
geom_point(data = last_obs, size = 3) + # Destaque para último ponto
scale_colour_manual(values = cores) +
scale_x_date(breaks = pretty_breaks(n = 8), date_labels = "%b %Y") +
ggthemes::theme_foundation() +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "gray90", size = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray70"),
legend.position = "none", # Remove legenda para evitar redundância com facetas
strip.text = element_text(size = 11, face = "bold", color = "#032cab"),
plot.title = element_text(size = 16, face = "bold", color = "#032cab", hjust = 0.5),
plot.subtitle = element_text(size = 12, color = "gray30", hjust = 0.5),
plot.caption = element_text(size = 9, color = "gray50", face = "italic"),
axis.title = element_text(size = 11, face = "bold", color = "gray30"),
axis.text = element_text(size = 10, color = "gray30"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~ variavel, scales = "free_y") + # Separar em facetas, um painel por variável
geom_label(
data = last_obs,
aes(label = round(valor, 1)),
vjust = -0.3, hjust = 0.7, size = 2.5, fontface = "bold", color = "black", fill = "white", label.size = 0.3
) +
labs(x = '', y = '',
title = 'Massa de Rendimento Médio em Pernambuco',
caption = foot_ibge)
colours_4 <- c("darkblue", "darkgray", "darkred", "#224f20", "#b35c1e", "#3b89bc")
last_obs <- massa_pe_long %>%
dplyr::filter(variavel %in% c('habitual', 'efetivo')) %>%
group_by(variavel) %>%
filter(date == max(date)) %>%
ungroup()
massa_pe_long %>%
dplyr::filter(variavel %in% c('habitual', 'efetivo')) %>%
ggplot(aes(x = date, y = valor, colour = variavel)) +
geom_line(size = 1) +   # Linha mais espessa para maior destaque
geom_point(data = last_obs, size = 3) + # Destaque para último ponto
scale_colour_manual(values = cores) +
scale_x_date(breaks = pretty_breaks(n = 8), date_labels = "%b %Y") +
ggthemes::theme_foundation() +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "gray90", size = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray70"),
legend.position = "none", # Remove legenda para evitar redundância com facetas
strip.text = element_text(size = 11, face = "bold", color = "#032cab"),
plot.title = element_text(size = 16, face = "bold", color = "#032cab", hjust = 0.5),
plot.subtitle = element_text(size = 12, color = "gray30", hjust = 0.5),
plot.caption = element_text(size = 9, color = "gray50", face = "italic"),
axis.title = element_text(size = 11, face = "bold", color = "gray30"),
axis.text = element_text(size = 10, color = "gray30"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~ variavel, scales = "free_y") + # Separar em facetas, um painel por variável
geom_label(
data = last_obs,
aes(label = round(valor, 1)),
vjust = -0.3, hjust = 0.7, size = 2.5, fontface = "bold", color = "black", fill = "white", label.size = 0.3
) +
labs(x = '', y = '',
title = 'Coeficiente de Variação Rendimento Efetivo x Habitual',
caption = foot_ibge)
rm(list = ls())
options(htmltools.dir.version = FALSE)
options(htmltools.preserve.raw = FALSE)
knitr::opts_chunk$set(
echo = FALSE,
warning   = FALSE,  # exibir avisos do console?
message   = FALSE,  # exibir mensagens do console?
dpi       = 300,    # resolução
fig.align = "center"# alinhamento de imagens
)
knitr::include_graphics("cancelamento_estado.png")
knitr::include_graphics("proporcao_churn.png")
knitr::include_graphics("distribuicao_churn.png")
knitr::include_graphics("evolucao.png")
knitr::include_graphics("distribuicao_churn.png")
knitr::include_graphics("cancelamento_estado.png")
knitr::include_graphics("taxa_por_estado.png")
knitr::include_graphics("previsao.png")
options(htmltools.dir.version = FALSE)
options(htmltools.preserve.raw = FALSE)
knitr::opts_chunk$set(
echo = FALSE,
warning   = FALSE,  # exibir avisos do console?
message   = FALSE,  # exibir mensagens do console?
dpi       = 300,    # resolução
fig.align = "center"# alinhamento de imagens
)
knitr::include_graphics("newplot")
knitr::include_graphics("newplot.png")
knitr::include_graphics("proporcao_churn.png")
knitr::include_graphics("distribuicao_churn.png")
knitr::include_graphics("proporcao.png")
knitr::include_graphics("newplot.png")
knitr::include_graphics("distribuicao_churn.png")
knitr::include_graphics("cancelamento_estado_novo.png")
knitr::include_graphics("evolucao.png")
knitr::include_graphics("proporcao.png")
knitr::include_graphics("cancelamento_por_loja.png")
knitr::include_graphics("taxa_por_estado.png")
knitr::include_graphics("taxa_por_estado.png")
knitr::include_graphics("motivos.png")
knitr::include_graphics("proporcao.png")
knitr::include_graphics("evolucao.png")
knitr::include_graphics("cancelamento_estado.png")
knitr::include_graphics("previsao.png")
# Dados das previsões
previsoes <- data.frame(
`Período (Meses)` = c(3, 6, 9, 12),
`Taxa de Churn Prevista (%)` = c(27.09, 28.38, 29.67, 30.96)
)
# Criar a tabela com kableExtra para formatação bonita
library(kableExtra)
previsoes %>%
kbl(
caption = "Tabela 1: Taxas de churn previstas para os próximos meses",
col.names = c("Período (Meses)", "Taxa de Churn Prevista (%)"),
align = "c"
) %>%
kable_classic(full_width = FALSE, html_font = "Arial")
knitr::include_graphics("previsao.png")
library(rpart)
library(rpart.plot)
library(rpart)
data("mtcars")
force(mtcars)
fit <- rpart(mpg ~., method = "anova", data = mtcars)
melhor_cp <- fit$cptable[which.min(fit$cptable[, "xerror"]),
"CP"]
pfit <- rpart::prune(fit, cp = melhor_cp)
rpart.plot(pfit, type = 4, extra = 1)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(pfit, type = 4, extra = 1)
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(knitr)
library(wooldridge)
library(ggplot2)
library(stargazer)
library(foreign)
rm(list = ls())
setwd("C:/Users/Usuário/Desktop/analise Macro/econometria_no_R/regressão_linear_simples")
setwd("C:/Users/Usuário/Desktop/teste_4i")
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
df <- read_excel("prova.xlsx")
library(readxl)
df <- read_excel("prova.xlsx")
View(df)
df <- read_excel("prova.xlsx", sheet = 2)
View(df)
df <- read_excel("prova.xlsx", sheet = 2, skip = 1)
view(df)
df <- read_excel("prova.xlsx", sheet = 2, skip = 1)
View(df)
library(readxl)
# Ler os dados sem cabeçalhos
df_bruto <- read_excel("prova.xlsx", sheet = 2, col_names = FALSE)
# Combinar as linhas 1 e 2 para formar os nomes das colunas
nomes_colunas <- paste(df_bruto[1, ], df_bruto[2, ], sep = " - ")
nomes_colunas <- gsub("NA - ", "", nomes_colunas) # Limpa 'NA - ' de colunas vazias
# Aplicar os nomes ao dataframe e remover as duas primeiras linhas
df <- df_bruto[-c(1,2), ]
colnames(df) <- nomes_colunas
# Resetar os índices
rownames(df) <- NULL
View(df)
## Carregar pacotes
library(vars)
library(gridExtra)
library(tidyverse)
library(readxl)
library(sidrar)
library(forecast)
library(scales)
library(ggrepel)
library(BETS)
ipca_indice = '/t/1737/n1/all/v/2266/p/all/d/v2266%2013' %>%
get_sidra(api=.) %>%
dplyr::mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) %>%
dplyr::select(date, Valor) %>%
mutate(mensal = round((Valor/lag(Valor, 1)-1)*100,2),
anual = round((Valor/lag(Valor, 12)-1)*100,2))
ipca_indice = '/t/1737/n1/all/v/2266/p/all/d/v2266%2013' %>%
get_sidra(api=.)
setwd("C:/Users/Usuário/Desktop/Material_ADEPE/Macrodados/inflacao")
ipca_indice = '/t/1737/n1/all/v/2266/p/all/d/v2266%2013' %>%
get_sidra(api=.) %>%
dplyr::mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) %>%
dplyr::select(date, Valor) %>%
mutate(mensal = round((Valor/lag(Valor, 1)-1)*100,2),
anual = round((Valor/lag(Valor, 12)-1)*100,2))
ipca_indice = '/t/1737/n1/all/v/2266/p/all/d/v2266%2013' %>%
get_sidra(api=.) %>%
dplyr::mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) %>%
dplyr::select(date, Valor) %>%
mutate(mensal = round((Valor/lag(Valor, 1)-1)*100,2),
anual = round((Valor/lag(Valor, 12)-1)*100,2))
setwd("C:/Users/Usuário/Desktop/Material_ADEPE/Macrodados/inflacao")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
foot_ibge <- "Fonte: Elaboração Própria com dados do IBGE"
ipca_indice = sidrar::get_sidra(api = '/t/1737/n1/all/v/2266/p/all/d/v2266%2013') |>
mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) |>
dplyr::select(date, Valor)
## Carregar pacotes
library(vars)
library(gridExtra)
library(tidyverse)
library(readxl)
library(sidrar)
library(forecast)
library(scales)
library(ggrepel)
library(BETS)
library(xtable)
library(lubridate)
library(RcppRoll)
library(knitr)
library(fpp3)
library(xts)
library(reshape2)
library(rbcb)
library(ggthemes)
library(purrr)
foot_ibge <- "Fonte: Elaboração Própria com dados do IBGE"
foot_ifi <- "Fonte: Elaboração Própria com dados da IFI"
foot_BCB <- "Fonte: Elaboração Própria com dados do BCB"
ipca_indice = sidrar::get_sidra(api = '/t/1737/n1/all/v/2266/p/all/d/v2266%2013') |>
mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) |>
dplyr::select(date, Valor)
foot_ifi <- "Fonte: Elaboração Própria com dados da IFI"
tinytex::reinstall_tinytex()
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
Y
tinytex::install_tinytex()
setwd("C:/Users/Usuário/Desktop/exercicio_ipca")
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
## Carregar pacotes
library(vars)
library(gridExtra)
library(tidyverse)
library(readxl)
library(sidrar)
library(forecast)
library(scales)
library(ggrepel)
library(xtable)
library(lubridate)
library(RcppRoll)
library(knitr)
library(fpp3)
library(xts)
library(reshape2)
library(rbcb)
library(ggthemes)
library(purrr)
foot_ibge <- "Fonte: Elaboração Própria com dados do IBGE"
foot_ifi <- "Fonte: Elaboração Própria com dados da IFI"
foot_BCB <- "Fonte: Elaboração Própria com dados do BCB"
ipca_indice = sidrar::get_sidra(api = '/t/1737/n1/all/v/2266/p/all/d/v2266%2013') |>
mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) |>
dplyr::select(date, Valor) |>
mutate(mensal = round((Valor/lag(Valor,1)-1)*100,2),
anual = round((Valor/lag(Valor, 12)-1)*100,2)) |>
drop_na()
rm(list = ls())
setwd("C:/Users/Usuário/Desktop/projetos_link/mercado_trab")
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(lubridate)
library(ggplot2)
library(tidyverse)
library(knitr)
library(ipeadatar)
library(sidrar)
library(knitr)
library(ggthemes)
library(plotly)
library(vars)
library(readxl)
library(xtable)
# Fontes
foot_ibge <- "Fonte: Elaboração Própria com dados do IBGE"
foot_mte <- "Fonte: Elaboração Própria com dados do Ministério da Economia."
# Cores para os Gráficos
colors <- c(
blue       = "#282f6b",
red        = "#b22200",
yellow     = "#eace3f",
green      = "#224f20",
purple     = "#5f487c",
orange     = "#b35c1e",
turquoise  = "#419391",
green_two  = "#839c56",
light_blue = "#3b89bc",
gray       = "#666666",
pink =       "#c310cc",
light_green=  "#8dcc10"
)
names = c("date", "populacao")
# populacao
polucao = '/t/6022/n1/all/v/606/p/all' |>
get_sidra(api=.)
polucao = '/t/6022/n1/all/v/606/p/all' |>
sidrar::get_sidra(api=.)
names = c("date", "populacao")
# populacao
populacao = '/t/6022/n1/all/v/606/p/all' %>%
get_sidra(api=.)
library(lubridate)
library(ggplot2)
library(tidyverse)
library(knitr)
library(ipeadatar)
library(sidrar)
library(knitr)
library(ggthemes)
library(plotly)
library(vars)
library(readxl)
library(xtable)
# Fontes
foot_ibge <- "Fonte: Elaboração Própria com dados do IBGE"
foot_mte <- "Fonte: Elaboração Própria com dados do Ministério da Economia."
# Cores para os Gráficos
colors <- c(
blue       = "#282f6b",
red        = "#b22200",
yellow     = "#eace3f",
green      = "#224f20",
purple     = "#5f487c",
orange     = "#b35c1e",
turquoise  = "#419391",
green_two  = "#839c56",
light_blue = "#3b89bc",
gray       = "#666666",
pink =       "#c310cc",
light_green=  "#8dcc10"
)
names = c("date", "populacao")
# populacao
populacao = sidrar::get_sidra(api='/t/6022/n1/all/v/606/p/all')
library(ipeadatar)
library(dplyr)
library(magrittr)
library(ipeadatar)
library(dplyr)
library(data.table)
library(ipeadatar)
library(dplyr)
library(data.table)
library(lubridate)
library(ggplot2)
library(dtplyr)
library(scales)
library(tidyverse)
library(knitr)
library(ipeadatar)
library(sidrar)
library(zoo)
library(scales)
library(timetk)
library(knitr)
library(ggthemes)
library(plotly)
library(writexl)
library(rbcb)
library(ggplot2)
library(vars)
library(readxl)
library(forecast)
library(scales)
library(ggrepel)
library(xtable)
names = c("date", "populacao")
# populacao
populacao = sidrar::get_sidra(api='/t/6022/n1/all/v/606/p/all')
rm(list = ls())
